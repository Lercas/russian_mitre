{
    "type": "bundle",
    "id": "bundle--491cea28-0159-45df-b790-c315506e3e8e",
    "spec_version": "2.0",
    "objects": [
        {
            "id": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "Митре",
            "identity_class": "organization",
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "type": "identity",
            "modified": "2017-06-01T00:00:00.000Z",
            "created": "2017-06-01T00:00:00.000Z"
        },
        {
            "type": "marking-definition",
            "id": "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "created": "2017-06-01T00:00:00Z",
            "definition_type": "statement",
            "definition": {
                "statement": "Copyright 2015-2021, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation."
            }
        },
        {
            "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
            "name": ".bash_profile и .bashrc",
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1156",
                    "url": "https://attack.mitre.org/techniques/T1156"
                },
                {
                    "url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
                    "description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Ботнет. Retrieved February 19, 2018.",
                    "source_name": "amnesia malware"
                }
            ],
            "revoked": true,
            "type": "attack-pattern",
            "modified": "2020-01-24T14:14:05.452Z",
            "created": "2017-12-14T16:46:06.044Z"
        },
        {
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1546.004",
                    "url": "https://attack.mitre.org/techniques/T1546/004"
                },
                {
                    "url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
                    "description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Ботнет. Retrieved February 19, 2018.",
                    "source_name": "amnesia malware"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": ".bash_profile и .bashrc",
            "description": "Adversaries may establish persistence by executing malicious content triggered by a user\u2019s shell. <code>~/.bash_profile</code> and <code>~/.bashrc</code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.\n\n<code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~/.bash_profile</code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~/.bashrc</code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.\n\nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\n\nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware)",
            "id": "attack-pattern--b63a34e8-0a61-4c97-a23b-bf8a2ed812e2",
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "privilege-escalation"
                },
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "persistence"
                }
            ],
            "modified": "2020-03-24T16:28:04.990Z",
            "created": "2020-01-24T14:13:45.936Z",
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": true,
            "x_mitre_permissions_required": [
                "User",
                "Administrator"
            ],
            "x_mitre_detection": "While users may customize their <code>~/.bashrc</code> and <code>~/.bash_profile</code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.",
            "x_mitre_data_sources": [
                "Process use of network",
                "Process command-line parameters",
                "Process monitoring",
                "File monitoring"
            ],
            "x_mitre_platforms": [
                "Linux",
                "macOS"
            ]
        },
        {
            "external_references": [
                {
                    "url": "https://attack.mitre.org/techniques/T1003/008",
                    "external_id": "T1003.008",
                    "source_name": "mitre-attack"
                },
                {
                    "description": "The Linux Documentation Project. (n.d.). Linux Password and Shadow File Formats. Retrieved February 19, 2020.",
                    "url": "https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html",
                    "source_name": "Linux Password and Shadow File Formats"
                },
                {
                    "description": "Vivek Gite. (2014, September 17). Linux Password Cracking: Explain unshadow and john Commands (John the Ripper Tool). Retrieved February 19, 2020.",
                    "url": "https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/",
                    "source_name": "nixCraft - John the Ripper"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "/etc/passwd и /etc/shadow",
            "description": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\n",
            "id": "attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4",
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "credential-access"
                }
            ],
            "modified": "2020-03-20T15:56:55.022Z",
            "created": "2020-02-11T18:46:56.263Z",
            "x_mitre_detection": "The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access <code>/etc/passwd</code> and <code>/etc/shadow</code>, alerting on the pid, process name, and arguments of such programs.",
            "x_mitre_permissions_required": [
                "root"
            ],
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": true,
            "x_mitre_platforms": [
                "Linux"
            ]
        },
        {
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1557.002",
                    "url": "https://attack.mitre.org/techniques/T1557/002"
                },
                {
                    "source_name": "RFC826 ARP",
                    "url": "https://tools.ietf.org/html/rfc826",
                    "description": "Plummer, D. (1982, November). An Ethernet Address Resolution Protocol. Retrieved October 15, 2020."
                },
                {
                    "source_name": "Sans ARP Spoofing Aug 2003",
                    "url": "https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411",
                    "description": "Siles, R. (2003, August). Real World ARP Spoofing. Retrieved October 15, 2020."
                },
                {
                    "source_name": "Cylance Cleaver",
                    "description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.",
                    "url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "Отравление кэша ARP ",
            "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
            "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "credential-access"
                },
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "collection"
                }
            ],
            "modified": "2020-10-16T15:22:11.604Z",
            "created": "2020-10-15T12:05:58.755Z",
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": true,
            "x_mitre_permissions_required": [
                "User"
            ],
            "x_mitre_detection": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. \n\nConsider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
            "x_mitre_data_sources": [
                "Packet capture",
                "Netflow/Enclave netflow"
            ],
            "x_mitre_contributors": [
                "Jon Sternstein, Stern Security"
            ],
            "x_mitre_platforms": [
                "Linux",
                "Windows",
                "macOS"
            ]
        },
        {
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1558.004",
                    "url": "https://attack.mitre.org/techniques/T1558/004"
                },
                {
                    "source_name": "Harmj0y Roasting AS-REPs Jan 2017",
                    "url": "http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/",
                    "description": "HarmJ0y. (2017, January 17). Roasting AS-REPs. Retrieved August 24, 2020."
                },
                {
                    "source_name": "Microsoft Kerberos Preauth 2014",
                    "url": "https://social.technet.microsoft.com/wiki/contents/articles/23559.kerberos-pre-authentication-why-it-should-not-be-disabled.aspx",
                    "description": "Sanyal, M.. (2014, March 18). Kerberos Pre-Authentication: Why It Should Not Be Disabled. Retrieved August 25, 2020."
                },
                {
                    "source_name": "Stealthbits Cracking AS-REP Roasting Jun 2019",
                    "url": "https://blog.stealthbits.com/cracking-active-directory-passwords-with-as-rep-roasting/",
                    "description": "Jeff Warren. (2019, June 27). Cracking Active Directory Passwords with AS-REP Roasting. Retrieved August 24, 2020."
                },
                {
                    "description": "Medin, T. (2014, November). Attacking Kerberos - Kicking the Guard Dog of Hades. Retrieved March 22, 2018.",
                    "source_name": "SANS Attacking Kerberos Nov 2014",
                    "url": "https://redsiege.com/kerberoast-slides"
                },
                {
                    "url": "https://adsecurity.org/?p=2293",
                    "description": "Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets Using Kerberoast \u2013 Exploiting Kerberos to Compromise the Active Directory Domain. Retrieved March 22, 2018.",
                    "source_name": "AdSecurity Cracking Kerberos Dec 2015"
                },
                {
                    "url": "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/",
                    "description": "Bani, M. (2018, February 23). Detecting Kerberoasting activity using Azure Security Center. Retrieved March 23, 2018.",
                    "source_name": "Microsoft Detecting Kerberoasting Feb 2018"
                },
                {
                    "source_name": "Microsoft 4768 TGT 2017",
                    "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4768",
                    "description": "Microsoft. (2017, April 19). 4768(S, F): A Kerberos authentication ticket (TGT) was requested. Retrieved August 24, 2020."
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "AS-REP Roasting",
            "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
            "id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b",
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "credential-access"
                }
            ],
            "modified": "2020-10-20T19:30:11.783Z",
            "created": "2020-08-24T13:43:00.028Z",
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": true,
            "x_mitre_system_requirements": [
                "Valid domain account"
            ],
            "x_mitre_permissions_required": [
                "User"
            ],
            "x_mitre_detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Microsoft Detecting Kerberoasting Feb 2018)(Citation: Microsoft 4768 TGT 2017)",
            "x_mitre_data_sources": [
                "Windows event logs",
                "Authentication logs"
            ],
            "x_mitre_contributors": [
                "James Dunn, @jamdunnDFW, EY",
                "Swapnil Kumbhar",
                "Jacques Pluviose, @Jacqueswildy_IT",
                "Dan Nutting, @KerberToast"
            ],
            "x_mitre_platforms": [
                "Windows"
            ]
        },
        {
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1548",
                    "url": "https://attack.mitre.org/techniques/T1548"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "Механизм контроля над злоупотреблением",
            "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
            "id": "attack-pattern--67720091-eee3-4d2d-ae16-8264567f6f5b",
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "privilege-escalation"
                },
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "defense-evasion"
                }
            ],
            "modified": "2020-07-22T21:36:52.825Z",
            "created": "2020-01-30T13:58:14.373Z",
            "x_mitre_data_sources": [
                "Windows Registry",
                "File monitoring",
                "Process command-line parameters",
                "API monitoring",
                "Process monitoring"
            ],
            "x_mitre_permissions_required": [
                "Administrator",
                "User"
            ],
            "x_mitre_detection": "Monitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of [Process Injection](https://attack.mitre.org/techniques/T1055) and unusual loaded DLLs through [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).\n\nConsider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\n\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT</code> and <code>LOG_OUTPUT</code> directives in the <code>/etc/sudoers</code> file.\n\nThere are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.",
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": false,
            "x_mitre_platforms": [
                "Linux",
                "macOS",
                "Windows"
            ]
        },
    ]
}